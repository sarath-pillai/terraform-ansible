---
- name: Create/Destroy ECS Clusters
  terraform:
    project_path: "../terraform/ecs/"
    force_init: yes
    variables:
      environment_name: "{{ environment_name }}"
      ecs_cluster: "{{ ecs_cluster }}"
      ecs_key_pair_name: "{{ ecs_key_pair_name }}"
      region: "{{ region }}"
      vpc_id: "{{ vpc_tf.outputs.vpc_id.value }}"
      public_ip: "{{ public_ip }}"
      instance_subnet1: "{{ vpc_tf.outputs.private_subnet1_id.value }}"
      instance_name: "{{ instance_name }}"
      instance_subnet2: "{{ vpc_tf.outputs.private_subnet2_id.value }}"
      ecs_launch_configuration: "{{ ecs_launch_configuration }}"
      ami_id: "{{ ami_id }}"
      instance_type: "{{ instance_type }}"
      service_name: "{{ service_name }}"
      taskdef_family: "{{ taskdef_family }}"
      ecs_security_group: "{{ sg_tf.outputs.internal_sg_id.value }}"
      root_volume_size: "{{ root_volume_size }}"
      max_instance_size: "{{ max_instance_size }}"
      min_instance_size: "{{ min_instance_size }}"
      desired_capacity: "{{ desired_capacity }}"
      container_memory: "{{ container_memory }}"
      container_cpu: "{{ container_cpu }}"
      target_group_name: "{{ target_group_name }}"
      ecs_instance_role_name: "{{ ecs_instance_role_name }}"
      target_group_protocol: "{{ target_group_protocol }}"
      response_match: "{{ response_match }}"
      unhealthy_threshold: "{{ unhealthy_threshold }}" 
      target_group_port: "{{ target_group_port }}"
      service_role_name: "{{ service_role_name }}"
      healthcheck_timeout: "{{ healthcheck_timeout }}"
      autoscaling_group_name: "{{ autoscaling_group_name }}"
      ecs_instance_profile_name: "{{ ecs_instance_profile_name }}"
      healthcheck_interval: "{{ healthcheck_interval }}"
      healthcheck_protocol: "{{ healthcheck_protocol }}"
      http_path: "{{ http_path }}" 
      container_name: "{{ container_name }}"
      lb_listener_port: "{{ lb_listener_port }}"
      container_port: "{{ container_port }}"
      container_subnets:
         - "{{ vpc_tf.outputs.private_subnet1_id.value }}"
         - "{{ vpc_tf.outputs.private_subnet2_id.value }}"
      container_security_group:
         - "{{ sg_tf.outputs.internal_sg_id.value }}"
      lb_arn: "{{ lb_tf.outputs.alb_front_arn.value }}"
    state: "{{ state }}"
  register: ecs_tf
  ignore_errors: yes
  environment:
    TF_WORKSPACE: "{{ environment_name }}"

- debug: var=ecs_tf.outputs.ecs-service-arn.value
